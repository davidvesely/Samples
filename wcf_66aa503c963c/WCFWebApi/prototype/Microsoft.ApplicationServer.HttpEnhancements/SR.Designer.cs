//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.ApplicationServer.HttpEnhancements {
    
    
    internal partial class SR {
        
        static System.Resources.ResourceManager resourceManager;
        
        static System.Globalization.CultureInfo resourceCulture;
        
        private SR() {
        }
        
        internal static System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceManager, null)) {
                    System.Resources.ResourceManager temp = new System.Resources.ResourceManager("Microsoft.ApplicationServer.HttpEnhancements.SR", typeof(SR).Assembly);
                    resourceManager = temp;
                }
                return resourceManager;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("StrictResXFileCodeGenerator", "4.0.0.0")]
        internal static System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>Gets localized string like: This formatter only supports bare style when used in request or response.</summary>
        internal static string FormEncodedMustBeBare {
            get {
                return ResourceManager.GetString("FormEncodedMustBeBare", Culture);
            }
        }
        
        /// <summary>Gets localized string like: MessageVersion must be None.</summary>
        internal static string MessageVersionMustBeNone {
            get {
                return ResourceManager.GetString("MessageVersionMustBeNone", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Expected either to receive JSON in the message body or the content-type to be application/x-www-form-urlencoded.</summary>
        internal static string ExpectUrlEncodedOrJson {
            get {
                return ResourceManager.GetString("ExpectUrlEncodedOrJson", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Query string name cannot be null.</summary>
        internal static string QueryStringNameShouldNotNull {
            get {
                return ResourceManager.GetString("QueryStringNameShouldNotNull", Culture);
            }
        }
        
        /// <summary>Gets localized string like: OperationContract {0} has both [WebGet] and [WebInvoke]. Only one of [WebGet] or [WebInvoke] can be applied to each operation contract.</summary>
        /// <param name="param0">Parameter 0 for string: OperationContract {0} has both [WebGet] and [WebInvoke]. Only one of [WebGet] or [WebInvoke] can be applied to each operation contract.</param>
        internal static string OperationContractConflictsWebGetOrWebInvoke(object param0) {
            return string.Format(Culture, ResourceManager.GetString("OperationContractConflictsWebGetOrWebInvoke", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Operation '{0}' of contract '{1}' specifies at least one request body parameter in addition to the JsonValue parameter which is not mapped to the UriTemplate. All non-JsonValue parameters must be mapped to the UriTemplate.</summary>
        /// <param name="param0">Parameter 0 for string: Operation '{0}' of contract '{1}' specifies at least one request body parameter in addition to the JsonValue parameter which is not mapped to the UriTemplate. All non-JsonValue parameters must be mapped to the UriTemplate.</param>
        /// <param name="param1">Parameter 1 for string: Operation '{0}' of contract '{1}' specifies at least one request body parameter in addition to the JsonValue parameter which is not mapped to the UriTemplate. All non-JsonValue parameters must be mapped to the UriTemplate.</param>
        internal static string ParameterUnmappedInUriTemplate(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ParameterUnmappedInUriTemplate", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Operation '{0}' in contract '{1}' has a query variable named '{2}' of type '{3}', but type '{3}' is not convertible by '{4}'. Variables for UriTemplate query values must have types that can be converted by '{4}'.</summary>
        /// <param name="param0">Parameter 0 for string: Operation '{0}' in contract '{1}' has a query variable named '{2}' of type '{3}', but type '{3}' is not convertible by '{4}'. Variables for UriTemplate query values must have types that can be converted by '{4}'.</param>
        /// <param name="param1">Parameter 1 for string: Operation '{0}' in contract '{1}' has a query variable named '{2}' of type '{3}', but type '{3}' is not convertible by '{4}'. Variables for UriTemplate query values must have types that can be converted by '{4}'.</param>
        /// <param name="param2">Parameter 2 for string: Operation '{0}' in contract '{1}' has a query variable named '{2}' of type '{3}', but type '{3}' is not convertible by '{4}'. Variables for UriTemplate query values must have types that can be converted by '{4}'.</param>
        /// <param name="param3">Parameter 3 for string: Operation '{0}' in contract '{1}' has a query variable named '{2}' of type '{3}', but type '{3}' is not convertible by '{4}'. Variables for UriTemplate query values must have types that can be converted by '{4}'.</param>
        /// <param name="param4">Parameter 4 for string: Operation '{0}' in contract '{1}' has a query variable named '{2}' of type '{3}', but type '{3}' is not convertible by '{4}'. Variables for UriTemplate query values must have types that can be converted by '{4}'.</param>
        internal static string QueryVariableCannotBeConverted(object param0, object param1, object param2, object param3, object param4) {
            return string.Format(Culture, ResourceManager.GetString("QueryVariableCannotBeConverted", Culture), param0, param1, param2, param3, param4);
        }
        
        /// <summary>Gets localized string like: The response format for the operation {0} is not supported. Operations returning JsonValue must have the ResponseFormat set to Json.</summary>
        /// <param name="param0">Parameter 0 for string: The response format for the operation {0} is not supported. Operations returning JsonValue must have the ResponseFormat set to Json.</param>
        internal static string ResponseFormatMustBeJson(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ResponseFormatMustBeJson", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Operation '{0}' in contract '{1}' has a UriTemplate that expects a parameter named '{2}', but there is no input parameter with that name on the operation.</summary>
        /// <param name="param0">Parameter 0 for string: Operation '{0}' in contract '{1}' has a UriTemplate that expects a parameter named '{2}', but there is no input parameter with that name on the operation.</param>
        /// <param name="param1">Parameter 1 for string: Operation '{0}' in contract '{1}' has a UriTemplate that expects a parameter named '{2}', but there is no input parameter with that name on the operation.</param>
        /// <param name="param2">Parameter 2 for string: Operation '{0}' in contract '{1}' has a UriTemplate that expects a parameter named '{2}', but there is no input parameter with that name on the operation.</param>
        internal static string UriTemplateParameterNotInOperation(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("UriTemplateParameterNotInOperation", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: {0} in the JsonValue object can not be both JsonObject and JsonArray.</summary>
        /// <param name="param0">Parameter 0 for string: {0} in the JsonValue object can not be both JsonObject and JsonArray.</param>
        internal static string ConflictingArrayPath(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ConflictingArrayPath", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Mismatching types at node '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Mismatching types at node '{0}'.</param>
        internal static string FormUrlEncodedMismatchingTypes(object param0) {
            return string.Format(Culture, ResourceManager.GetString("FormUrlEncodedMismatchingTypes", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Invalid array at node '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Invalid array at node '{0}'.</param>
        internal static string InvalidArrayInsert(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidArrayInsert", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Traditional style array without '[]' is not supported with nested object at location {0}.</summary>
        /// <param name="param0">Parameter 0 for string: Traditional style array without '[]' is not supported with nested object at location {0}.</param>
        internal static string JQuery13CompatModeNotSupportNestedJson(object param0) {
            return string.Format(Culture, ResourceManager.GetString("JQuery13CompatModeNotSupportNestedJson", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The maximum read depth ({0}) has been exceeded because the forms url-encoded data being read has more levels of nesting than is allowed by the quota. This quota may be increased by changing the MaxDepth property on the ReaderQuotas object in the WebMessageEncodingBindingElement.</summary>
        /// <param name="param0">Parameter 0 for string: The maximum read depth ({0}) has been exceeded because the forms url-encoded data being read has more levels of nesting than is allowed by the quota. This quota may be increased by changing the MaxDepth property on the ReaderQuotas object in the WebMessageEncodingBindingElement.</param>
        internal static string MaxDepthExceeded(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MaxDepthExceeded", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Nested bracket is not valid for form-urlencoded at position {0}.</summary>
        /// <param name="param0">Parameter 0 for string: Nested bracket is not valid for form-urlencoded at position {0}.</param>
        internal static string NestedBracketNotValid(object param0) {
            return string.Format(Culture, ResourceManager.GetString("NestedBracketNotValid", Culture), param0);
        }
        
        /// <summary>Gets localized string like: There is an unmatched opened bracket for the form-urlencoded string at position {0}.</summary>
        /// <param name="param0">Parameter 0 for string: There is an unmatched opened bracket for the form-urlencoded string at position {0}.</param>
        internal static string UnMatchedBracketNotValid(object param0) {
            return string.Format(Culture, ResourceManager.GetString("UnMatchedBracketNotValid", Culture), param0);
        }
    }
}

